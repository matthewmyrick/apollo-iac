name: 'Github Release'
description: 'Smart release management for Apollo IAC repository with semantic versioning'
author: 'Apollo Team'

inputs:
  github-token:
    description: 'GitHub token for creating releases and pushing tags'
    required: true
    default: ${{ github.token }}

outputs:
  released:
    description: 'Whether a release was created (true/false)'
    value: ${{ steps.version_bump.outputs.should_release }}
  version:
    description: 'The new version that was released (if any)'
    value: ${{ steps.new_version.outputs.new_version }}
  bump_type:
    description: 'The type of version bump (major/minor/patch/none)'
    value: ${{ steps.version_bump.outputs.bump_type }}

runs:
  using: 'composite'
  steps:
    - name: Get latest tag
      id: get_tag
      shell: bash
      run: |
        # Get the latest tag, default to v0.0.0 if none exists
        LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
        echo "latest_tag=$LATEST_TAG" >> $GITHUB_OUTPUT
        echo "Latest tag: $LATEST_TAG"

    - name: Determine version bump
      id: version_bump
      shell: bash
      run: |
        # Get the commit message
        COMMIT_MSG=$(git log -1 --pretty=%B)
        echo "Commit message: $COMMIT_MSG"

        # Determine bump type based on commit message
        if [[ $COMMIT_MSG == *"major:"* ]]; then
          BUMP_TYPE="major"
          SHOULD_RELEASE="true"
        elif [[ $COMMIT_MSG == *"minor:"* ]]; then
          BUMP_TYPE="minor"
          SHOULD_RELEASE="true"
        elif [[ $COMMIT_MSG == *"patch:"* ]]; then
          BUMP_TYPE="patch"
          SHOULD_RELEASE="true"
        else
          BUMP_TYPE="none"
          SHOULD_RELEASE="false"
          echo "⏭️ No version bump keyword found in commit message."
          echo "💡 To trigger a release, include 'major:', 'minor:', or 'patch:' in your commit message."
          echo "🚫 Skipping release creation."
        fi

        echo "bump_type=$BUMP_TYPE" >> $GITHUB_OUTPUT
        echo "should_release=$SHOULD_RELEASE" >> $GITHUB_OUTPUT
        echo "Bump type determined: $BUMP_TYPE"
        echo "Should release: $SHOULD_RELEASE"

    - name: Calculate new version
      id: new_version
      if: steps.version_bump.outputs.should_release == 'true'
      shell: bash
      run: |
        LATEST_TAG="${{ steps.get_tag.outputs.latest_tag }}"
        BUMP_TYPE="${{ steps.version_bump.outputs.bump_type }}"

        # Remove 'v' prefix for calculation
        VERSION=${LATEST_TAG#v}

        # Split version into parts
        IFS='.' read -ra VERSION_PARTS <<< "$VERSION"
        MAJOR=${VERSION_PARTS[0]}
        MINOR=${VERSION_PARTS[1]}
        PATCH=${VERSION_PARTS[2]}

        # Increment based on bump type
        case $BUMP_TYPE in
          "major")
            MAJOR=$((MAJOR + 1))
            MINOR=0
            PATCH=0
            ;;
          "minor")
            MINOR=$((MINOR + 1))
            PATCH=0
            ;;
          "patch")
            PATCH=$((PATCH + 1))
            ;;
        esac

        NEW_VERSION="v$MAJOR.$MINOR.$PATCH"
        echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
        echo "New version: $NEW_VERSION"

    - name: Create and push tag
      if: steps.version_bump.outputs.should_release == 'true'
      shell: bash
      run: |
        NEW_VERSION="${{ steps.new_version.outputs.new_version }}"
        git config user.name "github-actions[bot]"
        git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
        git tag -a $NEW_VERSION -m "Release $NEW_VERSION"
        git push origin $NEW_VERSION

    - name: Create GitHub Release
      if: steps.version_bump.outputs.should_release == 'true'
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ steps.new_version.outputs.new_version }}
        name: Release ${{ steps.new_version.outputs.new_version }}
        body: |
          🚀 **Apollo IAC Release ${{ steps.new_version.outputs.new_version }}**

          ## Changes
          - Version bump: ${{ steps.version_bump.outputs.bump_type }}
          - Infrastructure and configuration updates

          ## Components Updated
          - Kubernetes manifests and configurations
          - Harbor OCI registry projects and registries
          - GitHub Actions workflows and RBAC

          ## Commit Message
          ```
          ${{ github.event.head_commit.message }}
          ```
        draft: false
        prerelease: false
        token: ${{ inputs.github-token }}

    - name: Release Summary
      shell: bash
      run: |
        if [[ "${{ steps.version_bump.outputs.should_release }}" == "true" ]]; then
          # Console output for successful release
          echo "🎉 Release Summary 🎉"
          echo "===================="
          echo "📋 Previous Version: ${{ steps.get_tag.outputs.latest_tag }}"
          echo "🚀 Released Version: ${{ steps.new_version.outputs.new_version }}"
          echo "📈 Version Bump Type: ${{ steps.version_bump.outputs.bump_type }}"
          echo "🏷️  Tag Created: ${{ steps.new_version.outputs.new_version }}"
          echo "📦 GitHub Release: Created successfully"
          echo ""
          echo "✅ Release completed successfully!"
          
          # GitHub Actions Job Summary for release
          cat >> $GITHUB_STEP_SUMMARY << 'EOF'
        # 🎉 Apollo IAC Release Summary
        
        ## 📦 Release Information
        | Field | Value |
        |-------|-------|
        | 📋 Previous Version | ${{ steps.get_tag.outputs.latest_tag }} |
        | 🚀 Released Version | **${{ steps.new_version.outputs.new_version }}** |
        | 📈 Version Bump Type | `${{ steps.version_bump.outputs.bump_type }}` |
        | 🏷️ Tag Created | ${{ steps.new_version.outputs.new_version }} |
        | 📦 GitHub Release | ✅ Created successfully |
        
        ## 🏗️ Infrastructure Components Updated
        - ✅ Kubernetes manifests and configurations
        - ✅ Harbor OCI registry setup (projects and registries)
        - ✅ GitHub Actions workflows and RBAC policies
        
        ## 📝 Commit Details
        - **SHA:** `${{ github.sha }}`
        - **Branch:** `${{ github.ref_name }}`
        - **Author:** ${{ github.actor }}
        - **Message:** ${{ github.event.head_commit.message }}
        
        ## 🔗 Quick Links
        - [📦 Release Page](https://github.com/${{ github.repository }}/releases/tag/${{ steps.new_version.outputs.new_version }})
        - [🏷️ Tag Details](https://github.com/${{ github.repository }}/releases/tag/${{ steps.new_version.outputs.new_version }})
        - [📊 Repository](https://github.com/${{ github.repository }})
        
        ---
        > ✅ **Release ${{ steps.new_version.outputs.new_version }} completed successfully!** 🚀
        EOF
        else
          # Console output for skipped release
          echo "⏭️ Release Workflow Summary"
          echo "=========================="
          echo "🚫 No release created"
          echo "📝 Commit message: ${{ github.event.head_commit.message }}"
          echo "💡 To create a release, include 'major:', 'minor:', or 'patch:' in your commit message"
          echo ""
          echo "✅ Workflow completed successfully (no release needed)"
          
          # GitHub Actions Job Summary for skipped release
          cat >> $GITHUB_STEP_SUMMARY << 'EOF'
        # ⏭️ Apollo IAC Workflow Summary
        
        ## 🚫 No Release Created
        
        The workflow ran successfully but **no release was created** because the commit message did not contain a version bump keyword.
        
        ## 📝 Commit Information
        | Field | Value |
        |-------|-------|
        | **SHA** | `${{ github.sha }}` |
        | **Branch** | `${{ github.ref_name }}` |
        | **Author** | ${{ github.actor }} |
        | **Message** | ${{ github.event.head_commit.message }} |
        
        ## 💡 How to Trigger a Release
        
        To create a release, include one of these keywords in your commit message:
        
        - `major:` - For breaking changes (1.0.0 → 2.0.0)
        - `minor:` - For new features (1.0.0 → 1.1.0)
        - `patch:` - For bug fixes (1.0.0 → 1.0.1)
        
        ### Example commit messages:
        ```
        major: Complete rewrite of authentication system
        minor: Add user dashboard functionality
        patch: Fix login button styling issue
        ```
        
        ---
        > ✅ **Workflow completed successfully** - No release created 📋
        EOF
        fi

branding:
  icon: 'tag'
  color: 'blue'